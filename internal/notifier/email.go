package notifier

import (
	"fmt"
	"net/smtp"
	"strings"
	"time"

	"github.com/ravikantchauhan246/ospy/internal/storage"
)

// EmailNotifier handles email notifications
type EmailNotifier struct {
	host     string
	port     int
	username string
	password string
	from     string
	to       []string
	enabled  bool
}

// NewEmailNotifier creates a new email notifier
func NewEmailNotifier(host string, port int, username, password, from string, to []string) *EmailNotifier {
	return &EmailNotifier{
		host:     host,
		port:     port,
		username: username,
		password: password,
		from:     from,
		to:       to,
		enabled:  host != "" && username != "" && password != "",
	}
}

// IsEnabled returns whether email notifications are enabled
func (e *EmailNotifier) IsEnabled() bool {
	return e.enabled
}

// SendDownAlert sends an alert when a website goes down
func (e *EmailNotifier) SendDownAlert(websiteName, url, message string) error {
	if !e.enabled {
		return nil
	}

	subject := fmt.Sprintf("ðŸš¨ Website Down: %s", websiteName)
	body := fmt.Sprintf(`
Website Alert - Service Down

Website: %s
URL: %s
Status: DOWN
Message: %s
Time: %s

This is an automated alert from Ospy website monitor.
`, websiteName, url, message, time.Now().Format("2006-01-02 15:04:05"))

	return e.sendEmail(subject, body)
}

// SendUpAlert sends an alert when a website comes back up
func (e *EmailNotifier) SendUpAlert(websiteName, url string, downtime time.Duration) error {
	if !e.enabled {
		return nil
	}

	subject := fmt.Sprintf("âœ… Website Restored: %s", websiteName)
	body := fmt.Sprintf(`
Website Alert - Service Restored

Website: %s
URL: %s
Status: UP
Downtime: %v
Time: %s

This is an automated alert from Ospy website monitor.
`, websiteName, url, downtime, time.Now().Format("2006-01-02 15:04:05"))

	return e.sendEmail(subject, body)
}

// SendSummaryReport sends a periodic summary report
func (e *EmailNotifier) SendSummaryReport(stats []storage.WebsiteStats) error {
	if !e.enabled {
		return nil
	}

	subject := "ðŸ“Š Ospy Weekly Summary Report"
	
	var body strings.Builder
	body.WriteString("Weekly Website Monitoring Summary\n")
	body.WriteString(strings.Repeat("=", 40) + "\n\n")
	
	for _, stat := range stats {
		status := "ðŸŸ¢"
		if stat.LastStatus == "DOWN" {
			status = "ðŸ”´"
		}
		
		body.WriteString(fmt.Sprintf("%s %s\n", status, stat.WebsiteName))
		body.WriteString(fmt.Sprintf("   URL: %s\n", stat.URL))
		body.WriteString(fmt.Sprintf("   Uptime: %.2f%%\n", stat.UptimePercent))
		body.WriteString(fmt.Sprintf("   Avg Response: %.0fms\n", stat.AvgResponseTime))
		body.WriteString(fmt.Sprintf("   Total Checks: %d\n", stat.TotalChecks))
		body.WriteString(fmt.Sprintf("   Last Check: %s\n\n", stat.LastCheck.Format("2006-01-02 15:04:05")))
	}
	
	body.WriteString("Generated by Ospy website monitor\n")
	body.WriteString(fmt.Sprintf("Report time: %s\n", time.Now().Format("2006-01-02 15:04:05")))

	return e.sendEmail(subject, body.String())
}

// sendEmail sends an email using SMTP
func (e *EmailNotifier) sendEmail(subject, body string) error {
	auth := smtp.PlainAuth("", e.username, e.password, e.host)
	
	msg := fmt.Sprintf("From: %s\r\n", e.from)
	msg += fmt.Sprintf("To: %s\r\n", strings.Join(e.to, ","))
	msg += fmt.Sprintf("Subject: %s\r\n", subject)
	msg += "\r\n"
	msg += body

	addr := fmt.Sprintf("%s:%d", e.host, e.port)
	return smtp.SendMail(addr, auth, e.from, e.to, []byte(msg))
}